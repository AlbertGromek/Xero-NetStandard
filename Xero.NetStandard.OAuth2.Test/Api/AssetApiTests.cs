/* 
 * Xero Assets API
 *
 * This is the Xero Assets API
 *
 * The version of the OpenAPI document: 2.8.2
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using RestSharp;
using Xunit;

using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.Asset;
using AutoBogus;
using Xunit.Abstractions;

namespace Xero.NetStandard.OAuth2.Test.Api.Asset
{
    /// <summary>
    ///  Class for testing AssetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssetApiTests : IAsyncLifetime
    {
        private AssetApi instance;

        private const string accessToken = "XeroNetStandardTestAccessToken";

        private readonly ITestOutputHelper output;

        public AssetApiTests()
        {
            instance = new AssetApi();
        }

        // Methods are async but may not require it in specific cases
        #pragma warning disable CS1998 // This async method lacks 'await' operators
        public async Task InitializeAsync()
        {
            var directory = Directory.GetCurrentDirectory();
            var configuration = TestHelper.GetApplicationConfiguration(directory);
            var config = new Xero.NetStandard.OAuth2.Client.Configuration();
            config.BasePath = configuration.AssetBaseUrl;
            instance = new AssetApi(config);
        }

        public async Task DisposeAsync()
        {
            // Cleanup when everything is done.
        }
        #pragma warning restore CS1998 // This async method lacks 'await' operators

        /// <summary>
        /// Test an instance of AssetApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssetApi
            Assert.IsType(typeof(AssetApi), instance);
        }

        
        /// <summary>
        /// Test CreateAsset
        /// </summary>
        [Fact]
        public async Task CreateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string xeroTenantId = AutoFaker.Generate<string>();;
            var asset = new Xero.NetStandard.OAuth2.Model.Asset.Asset();
            var response = await instance.CreateAssetAsync(accessToken, xeroTenantId, asset);
            Assert.IsType<Xero.NetStandard.OAuth2.Model.Asset.Asset>(response);
        }
        
        /// <summary>
        /// Test CreateAssetType
        /// </summary>
        [Fact]
        public async Task CreateAssetTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //AssetType assetType = null;
            //var response = await instance.CreateAssetTypeAsync(accessToken, xeroTenantId, assetType);
            //Assert.IsType<AssetType>(response);
        }
        
        /// <summary>
        /// Test GetAssetById
        /// </summary>
        [Fact]
        public async Task GetAssetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid id = null;
            //var response = await instance.GetAssetByIdAsync(accessToken, xeroTenantId, id);
            //Assert.IsType<Asset>(response);
        }
        
        /// <summary>
        /// Test GetAssetSettings
        /// </summary>
        [Fact]
        public async Task GetAssetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = await instance.GetAssetSettingsAsync(accessToken, xeroTenantId);
            //Assert.IsType<Setting>(response);
        }
        
        /// <summary>
        /// Test GetAssetTypes
        /// </summary>
        [Fact]
        public async Task GetAssetTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = await instance.GetAssetTypesAsync(accessToken, xeroTenantId);
            //Assert.IsType<List<AssetType>>(response);
        }
        
        /// <summary>
        /// Test GetAssets
        /// </summary>
        [Fact]
        public async Task GetAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //AssetStatusQueryParam status = null;
            //int? page = null;
            //int? pageSize = null;
            //string orderBy = null;
            //string sortDirection = null;
            //string filterBy = null;
            //var response = await instance.GetAssetsAsync(accessToken, xeroTenantId, status, page, pageSize, orderBy, sortDirection, filterBy);
            //Assert.IsType<Assets>(response);
        }
        
    }

}
